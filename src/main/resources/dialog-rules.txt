rank(100) => Inform(Welcome)
Agent: Inform(Welcome) -> Hi! I am Troy, your office secretary. 

rank(40) Instruct(ActionCommand($1, $2)) => Inform() writeToSoar(ActionCommand, $1, $2) 
rank(40) Instruct(ActionCommand($1, $2, $3)) => Inform() writeToSoar(ActionCommand, $1, $2, $3) 
rank(40) Instruct(SignalEnd) => Inform writeToSoar(SignalEnd)
rank(40) Instruct(RelationDescription($1)) => Inform() writeToSoar(RelationDescription, $1)
rank(30) Request(readOutputFromSoar) => readFromSoar($1) say($1)

User: Instruct(ActionCommand($1, $2)) <-> {ActionName[$1]} {Entity[$2]}.
User: Instruct(ActionCommand($1, $2, $3)) <-> {ActionName[$1]} {Entity[$2]} {ActionObject[$3]}. {exact}
User: Instruct(ActionCommand($1, $2, $3, $4)) <-> {ActionName[$1]} {Entity[$2]} {ActionObject[$3]} {ActionObject[$4]}. {exact}
User: Instruct(RelationDescription($1)) <-> {Tokens[$_]} {Relation[$1]}
User: Instruct(SignalEnd) <-> You are done.

ActionName[verb(print)] <-> print
ActionName[verb(email)] <-> email
ActionName[verb(list)] <-> list
ActionName[verb(create)] <-> create
ActionName[verb(go)] <-> go
ActionName[verb(cut)] <-> cut
ActionName[verb(copy)] <-> copy
ActionName[verb(paste)] <-> paste
ActionName[verb(transfer)] <-> transfer

ActionSpecifier[action-specifier(from)] <-> from
ActionSpecifier[action-specifier(to)] <-> to
RelationSpecifier[relation-specifier(in)] <-> in

Relation[relation($1, $2, $3)] <-> {Entity[$1]}{RelationSpecifier[$2]}{Entity[$3]}
ActionObject[action-object($1, $2)] <-> {ActionSpecifier[$1]}{Entity[$2]}


EntityType[type(file)] <-> file
EntityType[type(folder)] <-> folder
EntityType[type(file)] <-> files
EntityType[type(folder)] <-> folders
EntityConstraint[has-set-property(determiner, indefinite)] <-> a
EntityConstraint[has-set-property(determiner, definite)] <-> the
EntityConstraint[has-set-property(determiner, distributive-all)] <-> all
EntityConstraint[has-set-property(determiner, distributive-all)] <-> all the
EntityConstraint[has-property(color, red)] <-> red

Entity[entity($1)] <-> {EntityName[$1]}
Entity[entity($1,$2)] <-> {EntityConstraint[$2]}{EntityType[$1]}
Entity[entity($1,$2,$3)] <-> {EntityConstraint[$3]}{EntityConstraint[$2]}{EntityType[$1]}

EntityName[name($1)] <-> with name {Token[$1]}
EntityName[name($1)] <-> named {Token[$1]}
EntityName[name($1)] <-> name {Token[$1]}
EntityName[name($1)] <-> {Token[$1]}
EntityName[name($1)] <-> into {Token[$1]}

Tokens <-> {Token+}
Token[$1] <-> {matches($1,.+)}

Inform(And($1)) -> The files are {$1}.
Inform($1) -> The file is {$1}.
Ask(goal) -> I do not know this task. Can you describe its goal?
Ask(next-action) -> I do not know what to do now. Can you tell me?




